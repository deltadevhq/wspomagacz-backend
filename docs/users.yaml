/api/users/search:
  get:
    summary: Get user profile data
    description: This endpoint requires authorization token
    tags: [ User Profile ]
    parameters:
      - in: query
        name: id
        required: false
        schema:
          type: integer
      - in: query
        name: username
        required: false
        schema:
          type: string
    responses:
      200:
        description: Successfully retrieved user profile
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserProfile"
      400:
        description: Bad request - Invalid user ID
      401:
        description: Unauthorized - Invalid or missing token
      403:
        description: Forbidden - Token does not have the required permissions
      404:
        description: Not Found - User not found

/api/users:
  get:
    deprecated: true
    summary: Retrieve users
    tags: [ User Profile ]
    parameters:
      - in: query
        name: username
        required: false
        schema:
          type: string
      - in: query
        name: limit
        required: false
        schema:
          type: integer
          minimum: 1
          maximum: 100
        description: Number of users to retrieve
      - in: query
        name: offset
        required: false
        schema:
          type: integer
          minimum: 0
        description: Number of users to skip
    responses:
      200:
        description: OK - Successfully retrieved users
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserProfile"
      400:
        description: Bad request - Invalid user ID
      401:
        description: Unauthorized - Invalid or missing token
      403:
        description: Forbidden - Token does not have the required permissions
      404:
        description: Not Found - User not found

/api/users/{id}:
  get:
    deprecated: true
    summary: Get user by ID
    tags: [ User Profile ]
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
    responses:
    200:
      description: Successfully retrieved user
      content:
      application/json:
        schema:
        $ref: "#/components/schemas/User"
    400:
      description: Bad request - Invalid user ID
    401:
      description: Unauthorized - Invalid or missing token
    403:
      description: Forbidden - Token does not have the required permissions
    404:
      description: Not Found - User not found

/api/users/{id}/avatar:
  get:
    summary: Retrieve user avatar by user ID
    tags: [ User Profile ]
    parameters:
      - in: path
        name: id
        description: The ID of the user whose avatar is being requested.
        required: true
        schema:
          type: integer
    responses:
      200:
        description: Successfully retrieved user avatar
        content:
          image/jpeg: { }
      404:
        description: Not Found - User avatar not found

/api/users/{id}/achievements:
  get:
    summary: Retrieve user achievements by user ID
    tags: [ User Achievements ]
    parameters:
      - in: path
        name: id
        description: The ID of the user whose achievements are being requested.
        required: true
        schema:
          type: integer
    responses:
      200:
        description: Successfully retrieved user achievements
      404:
        description: Not Found - User achievements not found

/api/users/{id}/achievements/categories:
  get:
    deprecated: true
    summary: Retrieve user achievements category data by user ID
    description: This retrieves the progress of the user in each achievement category
    tags: [ User Achievements ]
    parameters:
      - in: path
        name: id
        description: The ID of the user whose achievement categories are being requested.
        required: true
        schema:
          type: integer
    responses:
      200:
        description: Successfully retrieved user achievements
      404:
        description: Not Found - User achievements not found

/api/users/{id}/achievements/{achievement_id}:
  get:
    summary: Get user achievement by ID
    tags: [ User Achievements ]
    parameters:
      - in: path
        name: id
        description: The ID of the user whose achievement is being requested.
        required: true
        schema:
          type: integer
      - in: path
        name: achievement_id
        description: The ID of the achievement to retrieve.
        required: true
        schema:
          type: integer
    responses:
      200:
        description: Successfully retrieved user achievement
      404:
        description: Not Found - Achievement not found

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 10
        username:
          type: string
          example: test_user
        display_name:
          type: string
          example: Test User
        email:
          type: string
          example: test@user.com
        gender:
          type: string
          example: Male
          enum: [ male, female, not_specified ]
        birthday:
          type: date
          example: 2001-03-05
          nullable: true
        status:
          type: string
          example: active
          enum: [ active, inactive, restricted ]
        level:
          type: integer
          example: 1
          minimum: 1
        exp:
          type: integer
          example: 0
          minimum: 0
        weights:
          type: array
          items:
            type: object
            properties:
              weight:
                type: integer
                example: 75
              date:
                type: date
                example: 2024-09-08
        height:
          type: integer
          example: 175
          nullable: true
        last_logged_at:
          type: date
          example: 2024-09-09T17:44:12.057+01:00
          nullable: true
          description: Last time user logged in
          format: date-time
        created_at:
          type: date
          example: 2024-09-08T18:19:39.627+01:00
          format: date-time
          description: User account creation date
        modified_at:
          type: date
          example: 2024-09-09T17:44:12.057+01:00
          format: date-time
          description: Last time user data was modified
          nullable: true
    UserProfile:
      type: object
      properties:
        id:
          type: integer
          example: 10
        username:
          type: string
          example: test_user
        display_name:
          type: string
          example: Test User
        gender:
          type: string
          example: Male
          enum: [ male, female, not_specified ]
        birthday:
          type: date
          example: 2001-03-05
          nullable: true
        status:
          type: string
          example: active
          enum: [ active, inactive, restricted ]
        level:
          type: integer
          example: 1
          minimum: 1
        exp:
          type: integer
          example: 0
          minimum: 0
        weights:
          type: array
          items:
            type: object
            properties:
              weight:
                type: integer
                example: 75
              date:
                type: date
                example: 2024-09-08
        height:
          type: integer
          example: 175
          nullable: true
