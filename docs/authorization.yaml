/api/auth/register:
  post:
    summary: Create new user
    tags: [ Authorization ]
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - username
              - password
              - email
            properties:
              username:
                type: string
                example: system
              password:
                type: string
                example: 5yst3m@K
              email:
                type: email
                example: system@test.com
    security: [ ]
    responses:
      201:
        description: Created - Successfully created new user
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      400:
        description: Bad request - Invalid or missing user data
      409:
        description: Conflict - Email or username already taken

/api/auth/login:
  post:
    summary: Log in user
    description: Sets authorization token as cookie.
    tags: [ Authorization ]
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - username
              - password
            properties:
              username:
                type: string
                description: Username or email of the user
                example: system
              password:
                type: string
                example: 5yst3m@K
    security: [ ]
    responses:
      204:
        description: OK - Successfully logged in user
        headers:
          Set-Cookie:
            schema:
              type: string
              example: token=abcde12345; Max-Age:0; SameSite=Strict; Path=/; Secure; HttpOnly;
      400:
        description: Bad request - Invalid or missing login data
      401:
        description: Unauthorized - Invalid credentials

/api/auth/logout:
  get:
    summary: Log out currently logged-in user
    description: Removes cookie with authorization token.
    tags: [ Authorization ]
    responses:
      204:
        description: No Content - Removes cookie with authorization token
      401:
        description: Bad request - Invalid or missing authorization token

/api/auth/user:
  get:
    summary: Retrieve currently logged-in user
    description: Uses authorization token set in cookie to retrieve user data.
    tags: [ Authorization ]
    responses:
      200:
        description: OK - Successfully retrieved user data
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      401:
        description: Unauthorized - Invalid or missing token
      404:
        description: Not Found - User not found
  delete:
    deprecated: true
    summary: Delete currently logged-in user
    description: Deletes user and all associated data. Removes cookie with authorization token. Currently DELETE /api/users/{id}.
    tags: [ Authorization ]
    responses:
      404:
        description: Cannot DELETE /api/auth/user
  patch:
    deprecated: true
    summary: Patch currently logged-in user
    description: Only display_name, gender, birthday, weights and height can be updated through this endpoint. Currently PATCH /api/users/{id}.
    tags: [ Authorization ]
    responses:
      404:
        description: Cannot PATCH /api/auth/user

/api/auth/user/password:
  patch:
    summary: Change currently logged-in user's password
    tags: [ Authorization ]
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              password:
                type: string
                description: The current password of the user
                example: current_password123
              new_password:
                type: string
                description: The new password for the user
                example: new_password123
    responses:
      200:
        description: OK - Successfully updated user password
      400:
        description: Bad Request - Invalid password or using the same password
      401:
        description: Unauthorized - Invalid or missing token
      404:
        description: Not Found - User not found

/api/auth/user/password/reset:
  post:
    deprecated: true
    summary: Reset currently logged-in user's password
    description: Sends email with reset link to user's email address.
    tags: [ Authorization ]
    responses:
      404:
        description: Cannot POST /api/auth/user/password/reset
