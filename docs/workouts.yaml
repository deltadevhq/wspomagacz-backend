/api/workouts:
  get:
    summary: Retrieve workouts
    tags: [ Workouts ]
    parameters:
      - in: query
        name: user_id
        description: User ID
        required: false
      - in: query
        name: status
        description: Workout status
        required: false
        schema:
          type: string
          enum: [ completed, in_progress, planned, skipped ]
      - in: query
        name: date
        description: Date in format YYYY-MM-DD
        required: false
        schema:
          type: date
          format: date
      - in: query
        name: limit
        description: The maximum number of items to retrieve
        required: false
        schema:
          type: integer
      - in: query
        name: offset
        description: The number of items to skip
        required: false
        schema:
          type: integer
    responses:
      200:
        description: OK - Successfully retrieved workouts
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Workout"
      400:
        description: Bad request - Invalid request parameters
      401:
        description: Unauthorized - Invalid or missing token
  put:
    summary: Create new workout or edit existing for currently logged-in user
    tags: [ Workouts ]
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: integer
                example: 1
                minimum: 0
                nullable: true
              related_workout_id:
                type: integer
                example: null
                nullable: true
              name:
                type: string
                example: "Arm day"
                nullable: true
              exercises:
                type: array
                items:
                  type: object
                  properties:
                    exercise:
                      $ref: "#/components/schemas/Exercise"
                    sets:
                      type: array
                      items:
                        type: object
                        properties:
                          reps:
                            type: integer
                            example: 10
                            minimum: 0
                          weight:
                            type: float
                            example: 75
                            minimum: 0
                            nullable: true
                          order:
                            type: integer
                            example: 1
                            minimum: 0
                    order:
                      type: integer
                      example: 1
                      minimum: 0
              date:
                type: date
                example: 2024-09-08
                nullable: true
              notes:
                type: string
                example: "Great workout"
    responses:
      200:
        description: Successfully updated workout data
      400:
        description: Bad request - Invalid workout ID
      401:
        description: Unauthorized - Invalid or missing token
      403:
        description: Forbidden - Token does not have the required permissions
      404:
        description: Not Found - Workout not found

/api/workouts/{id}:
  get:
    summary: Retrieve workout by ID
    tags: [ Workouts ]
    parameters:
      - in: path
        name: id
        required: true
        description: Workout ID
    responses:
      200:
        description: Successfully retrieved workout
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Workout"
      400:
        description: Bad request - Invalid workout ID
      401:
        description: Unauthorized - Invalid or missing token
      403:
        description: Forbidden - Token does not have the required permissions
      404:
        description: Not Found - Workout not found
  delete:
    summary: Delete workout by ID (You can only delete currently logged-in user's workouts)
    tags: [ Workouts ]
    parameters:
      - in: path
        name: id
        required: true
        description: Workout ID
    responses:
      204:
        description: No Content - Successfully deleted workout
      400:
        description: Bad request - Invalid workout ID
      401:
        description: Unauthorized - Invalid or missing token
      403:
        description: Forbidden - Token does not have the required permissions
      404:
        description: Not Found - Workout not found

/api/workouts/{id}/summary:
  get:
    summary: Fetch workout summary (You can only fetch summary for currently logged-in user's workouts)
    tags: [ Workouts ]
    parameters:
      - in: path
        name: id
        required: true
        description: Workout ID
    responses:
    200:
      description: Successfully retrieved workout summary
      content:
      application/json:
        schema:
        type: object
        properties:
          workout:
            $ref: "#/components/schemas/Workout"
          experience_history:
            type: object
          duration:
            type: integer
            example: 60
            minimum: 0
          total_weight:
            type: float
            example: 750
            minimum: 0
    400:
      description: Bad request - Invalid workout ID
    401:
      description: Unauthorized - Invalid or missing token
    403:
      description: Forbidden - Token does not have the required permissions
    404:
      description: Not Found - Workout not found

/api/workouts/{id}/start:
  post:
    summary: Sets the workout start time to current time (You can only start currently logged-in's user workouts)
    tags: [ Workouts ]
    parameters:
      - in: path
        name: id
        required: true
        description: Workout ID
    responses:
      200:
        description: OK - Successfully started the workout
      400:
        description: Bad request - Invalid workout ID
      401:
        description: Unauthorized - Invalid or missing token
      403:
        description: Forbidden - Token does not have the required permissions
      404:
        description: Not Found - Workout not found
      409:
        description: Conflict - Workout already started

/api/workouts/{id}/stop:
  post:
    summary: Removes the workout start time (You can only stop currently logged-in user's workouts)
    tags: [ Workouts ]
    parameters:
      - in: path
        name: id
        required: true
        description: Workout ID
    responses:
      200:
        description: OK - Successfully stopped the workout
      400:
        description: Bad request - Invalid workout ID
      401:
        description: Unauthorized - Invalid or missing token
      403:
        description: Forbidden - Token does not have the required permissions
      404:
        description: Not Found - Workout not found
      409:
        description: Conflict - Workout not started

/api/workouts/{id}/finish:
  post:
    summary: Sets the workout finish time to current time (You can only finish currently logged-in user's workouts)
    tags: [ Workouts ]
    parameters:
      - in: path
        name: id
        required: true
        description: Workout ID
    responses:
      200:
        description: OK - Successfully finished the workout
      400:
        description: Bad request - Invalid workout ID
      401:
        description: Unauthorized - Invalid or missing token
      403:
        description: Forbidden - Token does not have the required permissions
      404:
        description: Not Found - Workout not found
      409:
        description: Conflict - Workout already finished

components:
  schemas:
    Workout:
      type: object
      properties:
        id:
          type: integer
          example: 1
          minimum: 0
        related_workout_id:
          type: integer
          example: null
        user_id:
          type: integer
          example: 1
        name:
          type: string
          example: "Workout name"
        exercises:
          type: array
          items:
            type: object
            properties:
              exercise:
                $ref: "#/components/schemas/Exercise"
              sets:
                type: array
                items:
                  type: object
                  properties:
                    reps:
                      type: integer
                      example: 10
                      minimum: 0
                    weight:
                      type: float
                      example: 75
                      minimum: 0
                    order:
                      type: integer
                      example: 1
                      minimum: 0
              order:
                type: integer
                example: 1
                minimum: 0
        date:
          type: date
          example: 2024-09-08
        started_at:
          type: date
          example: 2024-09-08T10:00:00+01:00
          nullable: true
        finished_at:
          type: date
          example: 2024-09-08T11:00:00+01:00
          nullable: true
        status:
          type: string
          example: completed
          enum: [ completed, in_progress, planned, skipped ]
        notes:
          type: string
          example: "Workout Note."
